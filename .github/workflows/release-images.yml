name: Release Images (Manual, Tag-based)

on:
  workflow_dispatch:
    inputs:
      release_ref:
        description: "Tag to build (e.g. v0.3.2)"
        type: string
        required: true
      push_images:
        description: "Push to GHCR"
        type: boolean
        required: true
        default: true
      publish_latest:
        description: "Also tag ':latest'"
        type: boolean
        required: true
        default: true

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  # Adjust this once so CI build numbers align with your legacy counter.
  BUILD_NUMBER_OFFSET: 83

jobs:
  release:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        service: [backend, frontend, workers]

    steps:
      - name: Checkout the requested tag
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.release_ref }}
          fetch-depth: 0

      - name: Parse semver from tag
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          RAW="${{ inputs.release_ref }}"
          if [[ "$RAW" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            SEMVER="${BASH_REMATCH[1]}.${BASH_REMATCH[2]}.${BASH_REMATCH[3]}"
            MAJOR="${BASH_REMATCH[1]}"; MINOR="${BASH_REMATCH[2]}"; PATCH="${BASH_REMATCH[3]}"
          else
            echo "release_ref must be vX.Y.Z; got: $RAW"; exit 1
          fi
          OFFSET="${{ env.BUILD_NUMBER_OFFSET }}"; [[ -z "$OFFSET" ]] && OFFSET=0
          BUILD=$(( $GITHUB_RUN_NUMBER + $OFFSET ))
          HASH=$(git rev-parse --short HEAD)
          TS=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          FULL="${SEMVER}+build.${BUILD}"
          {
            echo "semver=$SEMVER"
            echo "major=$MAJOR"
            echo "minor=$MINOR"
            echo "patch=$PATCH"
            echo "build=$BUILD"
            echo "full=$FULL"
            echo "hash=$HASH"
            echo "ts=$TS"
          } >> "$GITHUB_OUTPUT"

      - name: Login to GHCR
        if: inputs.push_images
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Fail if immutable tags already exist (safety)
        if: inputs.push_images
        shell: bash
        run: |
          set -euo pipefail
          owner='${{ github.repository_owner }}'
          semver='${{ steps.ver.outputs.semver }}'
          # Check one service (backend) to decide; replicate if you want per-service strictness
          existing=$(gh api -H "Accept: application/vnd.github+json" \
            /orgs/$owner/packages/container/eclaire-backend/versions \
            | jq -r '.[].metadata.container.tags[]' | grep -E "^v${semver}$" || true)
          if [[ -n "$existing" ]]; then
            echo "Refusing to overwrite existing release tag v${semver} in GHCR."
            echo "Delete the existing version in GHCR or bump the tag, then rerun."
            exit 2
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push ${{ matrix.service }}
        uses: docker/build-push-action@v6
        with:
          context: ./apps/${{ matrix.service }}
          file: ./apps/${{ matrix.service }}/Dockerfile
          push: ${{ inputs.push_images }}
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/eclaire-${{ matrix.service }}:v${{ steps.ver.outputs.semver }}
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/eclaire-${{ matrix.service }}:${{ steps.ver.outputs.major }}.${{ steps.ver.outputs.minor }}
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/eclaire-${{ matrix.service }}:v${{ steps.ver.outputs.semver }}-build.${{ steps.ver.outputs.build }}
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/eclaire-${{ matrix.service }}:${{ steps.ver.outputs.major }}.${{ steps.ver.outputs.minor }}.x-build.${{ steps.ver.outputs.build }}
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/eclaire-${{ matrix.service }}:release-${{ steps.ver.outputs.semver }}-run${{ github.run_number }}
          labels: |
            org.opencontainers.image.title=Eclaire-${{ matrix.service }}
            org.opencontainers.image.version=${{ steps.ver.outputs.full }}
            org.opencontainers.image.revision=${{ steps.ver.outputs.hash }}
            org.opencontainers.image.created=${{ steps.ver.outputs.ts }}
          build-args: |
            APP_VERSION=${{ steps.ver.outputs.semver }}
            APP_FULL_VERSION=${{ steps.ver.outputs.full }}
            APP_BUILD_NUMBER=${{ steps.ver.outputs.build }}
            APP_BUILD_TIMESTAMP=${{ steps.ver.outputs.ts }}
            APP_GIT_HASH=${{ steps.ver.outputs.hash }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Also tag :latest (optional)
        if: inputs.push_images && inputs.publish_latest
        shell: bash
        run: |
          set -euo pipefail
          owner='${{ github.repository_owner }}'
          semver='${{ steps.ver.outputs.semver }}'
          for svc in backend frontend workers; do
            src="${{ env.REGISTRY }}/${owner}/eclaire-${svc}:v${semver}"
            dst="${{ env.REGISTRY }}/${owner}/eclaire-${svc}:latest"
            docker buildx imagetools create -t "$dst" "$src"
            echo "Tagged $dst -> $src"
          done
